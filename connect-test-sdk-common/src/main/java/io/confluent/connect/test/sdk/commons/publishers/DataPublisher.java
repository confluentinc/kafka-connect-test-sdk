/*
 * Copyright [2023 - 2023] Confluent Inc.
 */

package io.confluent.connect.test.sdk.commons.publishers;

import java.util.ArrayList;
import java.util.List;

/** This class is used to publish data to Source System/ Kafka Topic
 * depending on the type of Connector. */
public abstract class DataPublisher<S> {

  private int uniqueIdMarker;
  private int currentRecordCount;
  private final List<String> uniqueIds;

  public DataPublisher() {
    uniqueIdMarker = 0;
    currentRecordCount = 0;
    uniqueIds = new ArrayList<>();
  }

  /** This method should generate a data point/ record for using the given raw unique id.
   * @param rawUniqueId Raw unique id to be used to generate the data point/ record.
   * @param currentRecordCount Current record count.
   * @return Data point/ record generated using the given raw unique id.
   * */
  public abstract S generateDataPoint(int rawUniqueId, int currentRecordCount);

  /** This method should return a list of unique ids from the given data point/ record.
   * It is possible that for a single data point/ record in a source system, there will be multiple
   * records in the Kafka topic. In such cases, this method should return a more than one unique id.
   * @param dataPoint Data point/ record from which unique ids are to be extracted.
   * @return List of unique ids extracted from the given data point/ record.
   * */
  public abstract List<String> getUniqueIdFrom(S dataPoint);

  /** This method should publish the given list of data points/ records
   *  to the source system/ Kafka topic.
   * @param dataPoints List of data points/ records to be published
   *                   to the source system/ Kafka topic.
   * @throws Exception Exception thrown while publishing the data points/ records
   * */
  public abstract void publishDataPoints(List<S> dataPoints) throws Exception;

  /** This method should publish the given number of data points/ records
   *  to the source system/ Kafka topic.
   * @param numberOfRecords Number of data points/ records to be published
   *                       to the source system/ Kafka topic.
   * @return List of data points/ records published to the source system/ Kafka topic.
   * @throws Exception Exception thrown while publishing the data points/ records
   * */
  public List<S> publishDataPoints(int numberOfRecords) throws Exception {
    List<S> dataPoints = new ArrayList<>();
    for (int i = 0; i < numberOfRecords; i++) {
      dataPoints.add(generateDataPoint(uniqueIdMarker, currentRecordCount));
      uniqueIdMarker++;
      currentRecordCount++;
    }
    publishDataPoints(dataPoints);
    for (S dataPoint : dataPoints) {
      uniqueIds.addAll(getUniqueIdFrom(dataPoint));
    }
    return dataPoints;
  }

  /** This method returns the list of unique ids of data generated by the publisher.
   * @return List of unique ids generated of data generated by the publisher.
   * */
  public List<String> getUniqueIds() {
    return uniqueIds;
  }

  /** This method returns the list of expected unique ids of data generated by the publisher.
   * It is required to override this method in case the expected unique ids that are going
   * to be generated in the end system are different from the actual unique ids generated
   * by the publisher.
   * @return List of expected unique ids of data generated by the publisher.
   * */
  public List<String> getExpectedUniqueIds() {
    return getUniqueIds();
  }
}
